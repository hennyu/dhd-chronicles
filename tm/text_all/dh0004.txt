
            In der Diskussion um den Status der Digital Humanities (DH) als wissenschaftliche Disziplin wird häufig die Frage einer Theoriebildung ins Feld geführt. Konfrontiert mit dem Vorwurf der Theorielosigkeit (vgl. Bauer 2011) sowie der Forderung nach „mehr Theorie“ (Lauer 2013, 112) lässt sich eine ausschweifende Theoriedebatte beobachten (vgl. Gold 2012). Zum einen werden die DH aufgrund der Heterogenität ihrer Gegenstände sowie ihres Aufgabenfeldes jenseits der Theoriebildung verortet 
            (vgl. Winko/Köppe 2013, 328). Zum anderen wird die Theoriebildung in eine zeitliche Relation gebracht (vgl. Hall 2012). So wird mit der Proklamation eines ‚Endes der Theorie‘ eine posttheoretische Ära eingeläutet (vgl. Scheinfeldt 2012), zugleich bekräftigt sich das Verständnis eines vortheoretischen Status der DH (vgl. Boellstorff 2014, 105). Was nun ‚vor‘ oder ‚nach‘ der Theorie liegt bestimmen beide Positionen auf ähnliche Weise, indem sie ihren Fokus auf die Aktivitäten (vgl. Flanders/Jannidis 2015, 3) oder „doing research“ (vgl. Kath et al. 2015, 31; Cecire 2011) richten. 
            
            Im Zuge dieser Hinwendung zur digitalen Praxis gewinnt die Entwicklung von prototypischer Software zunehmend an Bedeutung (vgl. Ramsey/Rockwell 2012). Übernommen aus der informatischen Softwareentwicklung wird unter einem Softwareprototyp eine „provisorische“ und „experimentelle“ (Ruecker et al.) Software verstanden, die eine zukünftige Systemkomplexität (Houde/Hill 1997; Mogensen 1992) auf bestimmte Teilkomponenten reduziert und diese unter Annahme eines deskriptiven oder prospektiven Potenzials ausstellt. Softwareprototypen werden als methodisch und theoretisch modellierte „digitale Artefakte“ (Rockwell/Ramsey 2012) verstanden, die neben den bereits in der Informatik etablierten Funktionen der Exploration, Erklärung und Verständigung zunehmend auch in anderen diskursiven Kontexten als Argument (Ruecker/Galey 2010), Provokation (Boer/Donovan 2012), Spekulation (Hinrichs/Forlini 2017), Vermittler von Performanz und Kritik (Drucker 2012) begriffen werden. Ruecker/Galey (2010, 1) sprechen von „Prototypen als Theorie“. 
            Softwareprototypen scheinen, so nun der Ausgangspunkt des Vortrages, nicht nur an epistemischen Status zu gewinnen, sondern auch den Bedarf der noch ausstehenden oder bereits obsoleten Theoriebildung zu adressieren. Der vorliegende Vortrag möchte darlegen, inwiefern Softwareprototypen als ‚Proto-Theorie‘ der DH begriffen werden können. Dazu stellt der Vortrag nicht nur die theoriebildenden Effekte eines Softwareprototyps vor, sondern argumentiert, dass der Softwareprototyp eine spezifische Form der Theoriegestaltung darstellt. Unter ‚Proto-Theorie‘ wird eine durch die Form des Softwareprototyps gestaltete Theoriearbeit begriffen. Der Vortrag versteht sich als Beitrag zu den Versuchen, die „Geisteswissenschaften als Ort avancierter Theoriebildung“ (Grizelj/Jahraus 2011, 9) neu zu vermessen sowie Spielräume und Grenzen einer auf Softwareprototypen aufbauenden Theoriebildung auszuloten. Zunächst wird ein geisteswissenschaftliches Verständnis der Konzepte 
                Prototyp und 
                Theorie vorgestellt. Anschließend wird die Theoriemündigkeit des Softwareprototyps eruiert.
            
            
                Zur Anschauung von Identität und Differenz – Das Konzept des Prototyps
            
            Während die Rede von einem Softwareprototypen im DH-Forschungsdiskurs etabliert ist, steht eine Auseinandersetzung mit dem Konzept des Prototyps über ein informatisches Verständnis hinaus noch 
            aus. Aus dem Griechischen von 
                prototypon ‚Urbild‘ abgeleitet, setzt sich das Kompositum aus „
                proto ‚vorderster, erster, bedeutsamster“ (Kluge 2011, 728) und „
                typos Schlag, Stoß (von gr. typtein ‚schlagen, prägen) ‚prägende Form‘, Umriss, Gestalt, Muster nach“ (Ritter 1998, 1587) zusammen. Im taxonomischen Referenzrahmen der Klassifizierung und Kategorisierung verortet, dient der Prototyp im Allgemeinen als Beschreibungsbegriff der Validierung von „Gleichheit und Verschiedenheit“ (Mainberger 2003, 42). Es können zwei Bestimmungen des Prototyps unterschieden werden: Unter der kognitionspsychologischen Perspektive (vgl. Rosch 1975) wird der Terminus des Prototyps in der Standardverwendung als abstrakte Entität eingeführt, welche die typischen Eigenschaften einer extensionalen Kategorie als bestes Exemplar repräsentiert 
                (vgl. Kleiber 1993, 117). Die Zugehörigkeit zu einer Kategorie wird in Bezug auf den Prototyp qua analytischer Quantifizierung von Merkmalen ermittelt. Notwendige Bedingung der Zugehörigkeit zu einer Kategorie ist die Übereinstimmung von mindestens einem Merkmal. 
            
            Davon zu unterscheiden ist eine morphologische Bestimmung des Prototyps, wie sie unter anderen Ludwig Wittgensteins Familienähnlichkeit 
            darstellt. Am Beispiel des Begriffs „Spiel“ führt Wittgenstein aus, dass nicht alle „Glieder einer Familie“ (Wittgenstein 1945, 278) durch ein einzelnes gemeinsam definierendes Merkmal vereint sind, sondern durch „ein kompliziertes Netz von Ähnlichkeiten, die einander übergreifen und kreuzen“ (278) verknüpft sind. Die Zugehörigkeit zu einer Kategorie stellt sich über Ähnlichkeitsbeziehungen her.
            
            Gestaltung von Zugängen – Theorien in der Literaturwissenschaft
            Der Begriff der Theorie „griechisch: 
                theoria geistiges Anschauen bzw. wissenschaftliches Betrachten“ bezeichnet „explizite, elaborierte, geordnete und logisch konsistente Kategoriensysteme, die der Beschreibung, Erforschung und Erklärung der Sachverhalte ihres jeweiligen Objektbereichs dienen“ (Nünning/Nünning 2010, 6). So adressiert die Theorie eine Mangelerfahrung, die sich in der Differenz zwischen Theorie und Welt expliziert: „Theorien sind ein Effekt der Unzugänglichkeit von Welt dergestalt, dass sie die Zugänglichkeit als Theorie substituieren und somit kompensieren“ (Jahraus 2011, 28). Bezogen auf die Literaturwissenschaft konstituieren Theorien nicht nur einen spezifischen Zugang zum Gegenstand Literatur, indem sie „Bedingungen der Produktion und Rezeption […] sowie […] Beschaffenheit und […] Funktionen“ reflektieren (Winko/Köppe 2013, 7), sondern sie erzeugen überhaupt erst den Gegenstand als epistemisches Objekt ihrer 
                Betrachtung.
            
            Darüber hinaus stellen Theorien eine spezifische Textgattung mit eigener Literarizität dar (vgl. Culler 2011, 3). Da Theorien vorrangig in Form von schriftlich verfassten Texten erscheinen und daher einer sprachlichen Logik folgen, unterliegen sie einer spezifischen Textualität, die konstitutiv, aber nicht reduzibel für die Gestaltung eines theoretischen Gehalts ist (vgl. Saar 2013, 47). Zu den „Minimalbedingungen“ (Winko/Köppe 2013, 8) einer Literaturtheorie gehören dabei erstens, der Abstraktionsgrad der theoretischen Aussage, der „auf mehrere, eventuell sogar alle Einzelphänomene eines bestimmten Typs zutr[ifft] bzw. ein Modell der Phänomene bereitzustell[t]“ (Winko/Köppe 2013, 8). Zweitens können Literaturtheorien resümierende, erklärende, koordinierende und prognostische Funktionen zugesprochen werden. Bezogen auf die Gestaltung einer Literaturtheorie ist drittens der systematische und formale Aufbau kennzeichnend. In Folge der Systematisierung kann viertens die Explizitheit des Begriffsapparats angeführt werden 
            (vgl. Winko/Köppe 2013, 8). In der literaturwissenschaftlichen Praxis ermöglicht der Anschluss an einer Theorie eine intersubjektive Nachvollziehbarkeit (vgl. Nünning/Nünning 2010, 2). So dienen Theorien dazu, Evidenz und Plausibilität unter Annahme eines Wahrheit- und Wissenschaftlichkeitsanspruches herzustellen und zu sichern. Mit Blick auf eine „interpretative community“ (Bode 2011, 80) und den allgemeinen wissenschaftlichen Diskurs schaffen Theorien einen spezifischen Kommunikationsrahmen. 
            
            Zur Theoriemündigkeit des Softwareprototyps in den DH
            Vor dem Hintergrund der skizzierten Prototypenkonzepte sowie den Anforderungen an (literaturwissenschaftliche) Theorien stellt sich nun die Frage, inwiefern Softwareprototypen diesem Anspruch gerecht werden können. Zunächst geht der Entwicklung einer prototypischen Software ein Prozess der Datenmodellierung und der Herstellung einer Ontologie (vgl. Jannidis/Flanders 2015, 7) voraus. In den Klassifikationsverfahren zur Gewinnung von Klassen, Eigenschaften und Relationen (vgl. [Gruber 2009] zit. Jannidis/Flanders 2015, 9) sedimentiert sich bereits ein theoretisches Wissen, wie zum Beispiel die Vorstellung vom Text oder von Bedeutung. Über diese theoretische präfigurierende Modellierung hinaus expliziert sich im Softwareprototyp jedoch die für Theorie konstitutive Differenzerfahrung von Beobachtung und Beobachteten. Der Softwareprototyp stellt einen Zugang dar, der interaktiv vermittelt wird. Als reduziertes und komprimiertes 
            Modell eines Sets von meist methodischen Operationen erfüllt der Softwareprototyp oftmals die „synthetische und integrierende Leistung einer […] Schau“ (Wirth 2013, 138). Einzelne Sachverhalte bzw. Aktivitäten werden verknüpft, die sodann prototypisch, das heißt prägend und musterhaft, als Teil eines größeren kohärenten Erklärungszusammenhangs erscheinen. Genauer gesagt, repräsentiert der Softwareprototyp die Theorie als funktionales Gefüge und übernimmt mithin eine exemplarische 
            Funktion. Er steht „nicht bloß stellvertretend und uneigentlich für Anderes, sondern prototypisch und materialiter für etwas ein, von dem er selbst ein nur zu demonstrativen [oder explikativen, RK] Zwecken abgetrennter Teil zu sein [verspricht]“ (Schaub 2011, 12). So finden sich zum Beispiel in den Abstracts der DHd Konferenz 2018 nicht nur zahlreiche Vorstellungen von 
            Softwareprototypen, sondern auch Formulierungen zur explikativen und prognostischen Leistung sowie zur Funktion der 
            Validierung. Oszillierend zwischen der Vorstellung vom Softwareprototyp als eine Figuration von 
            Evidenz und als verzeitlichte und verräumlichte Repräsentationsform der Theorie, die aufgrund ihres provisorischen Status zum spekulativen Spiel (vgl. Hacking 1983, 352) einlädt, zeigt sich die prekäre epistemische Lage. Denn der Softwareprototyp löst die scharfe „Distinktion zwischen der Welt der Dinge und der Welt der Zeichen“ (Rautzenberg/Strätling 2013, 11) auf. Vielmehr gehen die Grenzen fließend ineinander über, sodass zugleich die „differenztheoretische Grundlegung von Theorie“ (Jahraus 2011, 36) zugunsten einer interaktiven Erfahrung infrage gestellt 
            wird.
            
            Neben den Nachweis der theoriegenerierenden Effekte stellt sich die Frage nach der Form, in der das theoretische Wissen im Softwareprototypen erscheint. Die visuelle Ordnung des Softwareprototyps in Form einer grafischen Benutzeroberfläche ist nicht der textuellen Ästhetik des Linearen verpflichtet. An die Stelle der (textuellen) Systematizität tritt eine topologische und temporäre Entfaltung der Theorie. Hinsichtlich des Kriteriums der Explizitheit kann eine epistemische Verschiebung zur Präsenz hin angenommen werden. Im Sinne eines „Präsenzphänomen[s]“ 
            (Gumbrecht 2012, 216) scheint der Softwareprototyp nicht nur theoretisches Wissen zu repräsentieren, sondern die Visualität und Interaktion generiert einen Überschuss, in dem sich neues Wissen zeitigt. Dabei überlagert sich empirisch gesichertes und hypothetisch spekulatives Wissen.
            
            Begreift man nun die Pluralität von Softwareprototypen in der DH-Forschung aus einer übergeordneten Perspektive können die einzelnen Softwareprototypen im Sinne Wittgensteins als ‚Glieder einer Familie‘ betrachtet werden. So entsteht kein systematisches Theoriegebilde, sondern vielmehr die Dynamik eines offenen und unabgeschlossenen Netzes. 
            Schlussfolgerungen
            Die Diskussion um den epistemischen Status des Softwareprototyps hinterfragt nicht nur das Selbstverständnis der DH als (Hilfs)Wissenschaft und als 
            Forschungsinfrastruktur, sondern verortet die Arbeit an der Theoriebildung wieder in den Geisteswissenschaften. Wie sieht eine zeitgenössische Literaturtheorie aus, welche die einzelnen Sachverhalte in den Zusammenhang der Digitalität stellt? Die ‚Proto-Theorie‘ erweist sich als eine mögliche Antwort. Aufgaben der DH-Community sind daher, die Legitimation von unterschiedlichen Theorieformen zu erproben, die Differenzen und Barrieren zwischen textuellen und technischen Gestaltungsformen zu diskutieren und so das hybride Theorienetz zu verdichten. 
            
        
                
                    Vgl. Winko/Köppe (2013, 328): „Der Überblick über ihre heterogenen Arbeitsfelder macht bereits deutlich, dass die Computerphilologie nicht an der Entwicklung einer umfassenden Literaturtheorie interessiert ist, sondern andere Ziele verfolgt.“ Die eigentliche Theoriearbeit wird dabei verstanden als außerhalb der DH, zum Beispiel in den Medienwissenschaften oder Software Studies (vgl. Jannidis et. al 2017, 19) sowie der Mathematik und Informatik (Flanders/Jannidis 2015, 2).
                
                
                    Eine Ausnahme stellt der DHd-Beitrag von Henny-Krahmer et. al. (2018): 
                        Alternative Gattungstheorien: Das Prototypenmodell am Beispiel hispanoamerikanischer Romane dar. Hier wird das Protypenmodell als Gattungskonzept diskutiert.
                
                
                    Auf das problematische Verhältnis von Begriff und Prototyp kann an dieser Stelle nur hingewiesen werden. Weitere Ausführungen finden sich bei Kleiber (1993) sowie Gansel (2017).
                
                
                    Zu nennen sind auch die Verfahrensweise der vergleichenden Naturlehre, wie sie von Buffon, Herder und Goethe präsentiert werden.
                
                
                    Signifikant für die Praxis der Literaturwissenschaft ist dabei vor allem das Nebeneinander von unterschiedlichen theoretischen Ansätzen (Wellbery 1985, 7; Jahrhaus/Neuhaus 1995).
                
                
                    Methoden unterscheiden sich von Theorien dadurch, dass sie eher die Art und Weise eines Vorgehens zielführend beschreiben. Theorien können folglich eine sowie ein Set von allgemeinen (Lesen, Hypothesen generieren) sowie spezifischen (deduktiven, dialektischen) Methoden bereitstellen. Exemplarisch für die hermeneutische Theorie ist der hermeneutische Zirkel oder das systemtheoretische Re-entry für die Systemtheorie.
                
                
                    Stachowiak (1992, 219) definiert das Modell als „pragmatische Entität eines (mindestens) fünfstelligen Prädikats […]: X ist Modell des Originals Y für den Verwender k in der Zeitspanne t bezüglich der Intention Z.“ Allgemeine Ausführungen zum Modell vgl. auch Epple (2016).
                
                
                    Entgegen der These von Rockwell/Ramsey (2012) zur „Thing Theory“ geht es nicht um die konkrete Materialisation der Theorie als eines objektiven Gegenstandes, der die textuelle Form der Theorie substituiert.
                
                
                    Vgl. DHd 2018, Köln Abstracts: Es finden sich 17 Erwähnung von Softwareprototypen, verstanden als prototypische Software, auf den Seiten 32, 53, 65, 98, 154, 164,175, 194-195, 205, 220, 273, 282, 388, 422, 435, 459, 466-468.
                
                
                    Beispiele der Erwähnungen von Softwareprototypen mit Hinweis auf den Leistungsumfang: „zur Diskussion gestellt“ (S. 32); „Anforderungen und Interessen aus der Fachcommunity zur Weiterentwicklung“ (S. 53); „Prozess zu beschleunigen bzw. zuverlässiger zu machen“ (S. 65); „iterativ […] gewonnene[] Erkenntnisse“ (S. 195); „die einzelnen Funktionalitäten und Konfigurationsmöglichkeiten ausgetestet und verbessert“ (S. 205), „Interaktions-Prototypen mit Nutzern zu testen, um belastbarere Aussagen über seine Validität zu erhalten.“ (S. 282) etc.
                
                
                    Eine Evidenzgenerierung erfolgt bei literaturwissenschaftlichen Softwareprototypen zum Beispiel durch Visualisierung oder Text-Mining. Softwareprototypen erscheinen vor diesem Hintergrund als dezidierte Beweisverfahren der DH, die evidentielle Gewissheit und Präsenz vermitteln.
                
                
                    Im Unterschied zur textuellen Theorieform wird das Subjekt, das sich durch die Theorie einen Zugang verschaffen will, scheinbar schon durch die interaktive Ausrichtung des Softwareprototyps ‚mit-konstituiert‘. Hier schließt sich die Frage nach der Subjektkonstituierung in textuellen und technischen Theorieformen an.
                
                
                    Gumbrecht (2012) in Rekurs auf Jean-Luc Nancy einen Begriff der „Präsenz, der sich auf unser räumliches Verhältnis zu den Dingen der Welt“ aufbaut.
                
                
                    Unter den Aspekt der Forschungsinfrastruktur fallen Erwägungen über interdisziplinäre Teamstrukturen, Projektkonstellationen sowie Forschungsförderungen und -finanzierungen. Zur Diskussion steht unter anderen die Frage, warum Ressourcen für die Herstellung von Softwareprototypen eingesetzt werden.
                
            